// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";


export class Cancel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("exchange", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): Cancel | null {
    return changetype<Cancel | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get exchange(): Bytes {
    let value = this.get("exchange");
    return value!.toBytes();
  }

  set exchange(value: Bytes) {
    this.set("exchange", Value.fromBytes(value));
  }
}

// struct Order {
//   /* Exchange address, intended as a versioning mechanism. */
//   address exchange;
//   /* Order maker address. */
//   address maker;
//   /* Order taker address, if specified. */
//   address taker;
//   /* Maker relayer fee of the order, unused for taker order. */
//   uint makerRelayerFee;
//   /* Taker relayer fee of the order, or maximum taker fee for a taker order. */
//   uint takerRelayerFee;
//   /* Maker protocol fee of the order, unused for taker order. */
//   uint makerProtocolFee;
//   /* Taker protocol fee of the order, or maximum taker fee for a taker order. */
//   uint takerProtocolFee;
//   /* Order fee recipient or zero address for taker order. */
//   address feeRecipient;
//   /* Fee method (protocol token or split fee). */
//   FeeMethod feeMethod;
//   /* Side (buy/sell). */
//   SaleKindInterface.Side side;
//   /* Kind of sale. */
//   SaleKindInterface.SaleKind saleKind;
//   /* Target. */
//   address target;
//   /* HowToCall. */
//   AuthenticatedProxy.HowToCall howToCall;
//   /* Calldata. */
//   bytes calldata;
//   /* Calldata replacement pattern, or an empty byte array for no replacement. */
//   bytes replacementPattern;
//   /* Static call target, zero-address for no static call. */
//   address staticTarget;
//   /* Static call extra data. */
//   bytes staticExtradata;
//   /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */
//   address paymentToken;
//   /* Base price of the order (in paymentTokens). */
//   uint basePrice;
//   /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */
//   uint extra;
//   /* Listing timestamp. */
//   uint listingTime;
//   /* Expiration timestamp - 0 for no expiry. */
//   uint expirationTime;
//   /* Order salt, used to prevent duplicate hashes. */
//   uint salt;
//   /* NOTE: uint nonce is an additional component of the order but is read from storage */
// }
// this.set("exchange", Value.fromString(id));
// this.set("maker", Value.fromBigInt(BigInt.zero()));
// this.set("taker", Value.fromBytes(Bytes.empty()));
// this.set("makerRelayerFee", Value.fromBytes(Bytes.empty()));
// this.set("takerRelayerFee", Value.fromBytes(Bytes.empty()));
// this.set("makerProtocolFee", Value.fromBytes(Bytes.empty()));
// this.set("takerProtocolFee", Value.fromBytes(Bytes.empty()));
// this.set("feeRecipient", Value.fromBytes(Bytes.empty()));
// this.set("feeMethod", Value.fromBytes(Bytes.empty()));
// this.set("side", Value.fromBytes(Bytes.empty()));
// this.set("saleKind", Value.fromBytes(Bytes.empty()));
// this.set("target", Value.fromBytes(Bytes.empty()));
// this.set("howToCall", Value.fromBytes(Bytes.empty()));
// this.set("calldata", Value.fromBytes(Bytes.empty()));
// this.set("replacementPattern", Value.fromBytes(Bytes.empty()));
// this.set("staticTarget", Value.fromBytes(Bytes.empty()));
// this.set("staticExtradata", Value.fromBytes(Bytes.empty()));
// this.set("paymentToken", Value.fromBytes(Bytes.empty()));
// this.set("basePrice", Value.fromBytes(Bytes.empty()));
// this.set("extra", Value.fromBytes(Bytes.empty()));
// this.set("listingTime", Value.fromBytes(Bytes.empty()));
// this.set("expirationTime", Value.fromBytes(Bytes.empty()));
// this.set("salt", Value.fromBytes(Bytes.empty()));
export class Order extends Entity {
  constructor(exaddress: string) {
    super();


  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): Cancel | null {
    return changetype<Cancel | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get exchange(): Bytes {
    let value = this.get("exchange");
    return value!.toBytes();
  }

  set exchange(value: Bytes) {
    this.set("exchange", Value.fromBytes(value));
  }
}